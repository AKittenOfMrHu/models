import torch
import torch.nn as nn
import torch.nn.functional as F
from model.attention_block import CAM_Module, PAM_Module

__all__ = ['ResNet', 'resnet18', 'resnet34', 'resnet50', 'resnet101',
           'resnet152']


def conv3x3(in_planes, out_planes, stride=1):
    """3x3 convolution with padding"""
    return nn.Conv3d(in_planes, out_planes, kernel_size=3, stride=stride,
                     padding=1, bias=False)


def conv1x1(in_planes, out_planes, stride=1):
    """1x1 convolution"""
    return nn.Conv3d(in_planes, out_planes, kernel_size=1, stride=stride, bias=False)


class DropoutBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(DropoutBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm3d(planes)
        #self.bn1 = nn.InstanceNorm3d(planes)
        self.relu = nn.LeakyReLU(inplace=True, negative_slope=1e-1)
        self.dropout1 = nn.Dropout3d(p=0.2)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm3d(planes)
        self.dropout2 = nn.Dropout3d(p=0.2)
        #self.bn2 = nn.InstanceNorm3d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)
        out = self.dropout1(out)

        out = self.conv2(out)
        out = self.bn2(out)
        
        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)
        out = self.dropout2(out)

        return out

class BasicBlock(nn.Module):
    expansion = 1

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(BasicBlock, self).__init__()
        self.conv1 = conv3x3(inplanes, planes, stride)
        self.bn1 = nn.BatchNorm3d(planes)
        #self.bn1 = nn.InstanceNorm3d(planes)
        self.relu = nn.LeakyReLU(inplace=True, negative_slope=1e-1)
        self.conv2 = conv3x3(planes, planes)
        self.bn2 = nn.BatchNorm3d(planes)
        #self.bn2 = nn.InstanceNorm3d(planes)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class Bottleneck(nn.Module):
    expansion = 4

    def __init__(self, inplanes, planes, stride=1, downsample=None):
        super(Bottleneck, self).__init__()
        self.conv1 = conv1x1(inplanes, planes)
        #self.bn1 = nn.BatchNorm3d(planes)
        self.bn1 = nn.InstanceNorm3d(planes)
        self.conv2 = conv3x3(planes, planes, stride)
        #self.bn2 = nn.BatchNorm3d(planes)
        self.bn2 = nn.InstanceNorm3d(planes)
        self.conv3 = conv1x1(planes, planes * self.expansion)
        #self.bn3 = nn.BatchNorm3d(planes * self.expansion)
        self.bn3 = nn.BatchNorm3d(planes * self.expansion)
        self.relu = nn.LeakyReLU(inplace=True, negative_slope=1e-1)
        self.downsample = downsample
        self.stride = stride

    def forward(self, x):
        identity = x

        out = self.conv1(x)
        out = self.bn1(out)
        out = self.relu(out)

        out = self.conv2(out)
        out = self.bn2(out)
        out = self.relu(out)

        out = self.conv3(out)
        out = self.bn3(out)

        if self.downsample is not None:
            identity = self.downsample(x)

        out += identity
        out = self.relu(out)

        return out


class ResNet(nn.Module):

    def __init__(self, input_channels, block, layers, num_classes=1, zero_init_residual=False):
        super(ResNet, self).__init__()
        self.inplanes = 64
        self.conv1 = nn.Conv3d(input_channels, 64, kernel_size=(1, 7, 7), stride=(1, 2, 2), padding=(0, 3, 3),
                               bias=False)
        self.bn1 = nn.BatchNorm3d(64)
        #self.bn1 = nn.InstanceNorm3d(64)
        self.relu = nn.LeakyReLU(inplace=True, negative_slope=1e-1)
        self.maxpool = nn.MaxPool3d(kernel_size=(1, 3, 3), stride=(1, 2, 2), padding=(0, 1, 1))
        self.layer1 = self._make_layer(block, 64, layers[0])
        self.layer2 = self._make_layer(block, 128, layers[1], stride=2)
        self.layer3 = self._make_layer(block, 256, layers[2], stride=2)
        self.layer4 = self._make_layer(block, 512, layers[3], stride=2)
        self.avgpool = nn.AdaptiveAvgPool3d((1, 1, 1))
        self.fc = nn.Linear(512 * block.expansion, num_classes)

        for m in self.modules():
            if isinstance(m, nn.Conv3d):
                nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')
            elif isinstance(m, nn.BatchNorm3d):
                nn.init.constant_(m.weight, 1)
                nn.init.constant_(m.bias, 0)

        if zero_init_residual:
            for m in self.modules():
                if isinstance(m, Bottleneck):
                    nn.init.constant_(m.bn3.weight, 0)
                elif isinstance(m, BasicBlock):
                    nn.init.constant_(m.bn2.weight, 0)

    def _make_layer(self, block, planes, blocks, stride=1):
        downsample = None
        if stride != 1 or self.inplanes != planes * block.expansion:
            downsample = nn.Sequential(
                conv1x1(self.inplanes, planes * block.expansion, stride),
                nn.BatchNorm3d(planes * block.expansion),
                #nn.InstanceNorm3d(planes * block.expansion)
            )

        layers = []
        layers.append(block(self.inplanes, planes, stride, downsample))
        self.inplanes = planes * block.expansion
        for _ in range(1, blocks):
            layers.append(block(self.inplanes, planes))

        return nn.Sequential(*layers)

    def forward(self, x):
        x = self.conv1(x)
        x = self.bn1(x)
        x = self.relu(x)
        print('base: ', x.shape)
        x = self.maxpool(x)
        print('pool: ', x.shape)

        x1 = self.layer1(x)
        print('x1: ', x1.shape)
        x2 = self.layer2(x1)
        print('x2: ', x2.shape)
        x3 = self.layer3(x2)
        print('x3: ', x3.shape)
        x4 = self.layer4(x3)
        print(x4.shape)
        x = self.avgpool(x4)
        x = x.view(x.size(0), -1)
        x = self.fc(x)

        return x


class ResNet18Linear2(nn.Module):
    def __init__(self, input_channels, out_cls, **kwargs):
        super(ResNet18Linear2, self).__init__()
        self.cnn = nn.Sequential(*list(resnet18(input_channels, **kwargs).children())[:-1])
        self.linear = nn.Sequential(
            nn.Linear(512, 512),
            nn.LeakyReLU(inplace=True, negative_slope=1e-1),
            nn.Dropout(0.4),
            nn.Linear(512, out_cls)
        )

    def forward(self, x):
        x = self.cnn(x)
        x = x.view(x.size(0), -1)
        x = self.linear(x)
        return x


class ResNet18Linear2WithAttention(nn.Module):
    def __init__(self, input_channels, **kwargs):
        super(ResNet18Linear2WithAttention, self).__init__()
        self.cnn = nn.Sequential(*list(resnet18(input_channels, **kwargs).children())[:-2])
        self.cam = CAM_Module(512)
        self.pam = PAM_Module(512)
        self.linear = nn.Sequential(
            nn.Linear(1024, 1024),
            nn.LeakyReLU(inplace=True, negative_slope=1e-1),
            nn.Dropout(0.4),
            nn.Linear(1024, 1)
        )

    def forward(self, x):
        x = self.cnn(x)
        cx = self.cam(x)
        px = self.pam(x)
        x = torch.cat([cx, px], dim=1)
        x = F.adaptive_avg_pool3d(x, (1, 1, 1))
        x = x.view(x.size(0), -1)
        x = self.linear(x)
        return x


def resnet18(input_channels, **kwargs):
    model = ResNet(input_channels, BasicBlock, [2, 2, 2, 2], **kwargs)
    return model
    
    
def resnet18withdropout(input_channels, **kwargs):
    model = ResNet(input_channels, DropoutBlock, [2, 2, 2, 2], **kwargs)
    return model


def resnet34(input_channels, **kwargs):
    model = ResNet(input_channels, BasicBlock, [3, 4, 6, 3], **kwargs)
    return model


def resnet50(input_channels, **kwargs):
    model = ResNet(input_channels, Bottleneck, [3, 4, 6, 3], **kwargs)
    return model


def resnet101(input_channels, **kwargs):
    model = ResNet(input_channels, Bottleneck, [3, 4, 23, 3], **kwargs)
    return model


def resnet152(input_channels, **kwargs):
    model = ResNet(input_channels, Bottleneck, [3, 8, 36, 3], **kwargs)
    return model


if __name__ == '__main__':
    from torch.optim import Adam
    from torch.nn import BCEWithLogitsLoss
    resnet18 = resnet34(2).cuda()

    optim = Adam(resnet18.parameters(), lr=1e-3)
    criter = BCEWithLogitsLoss()
    for i in range(1):
        x = torch.rand([1, 2, 20, 320, 448]).cuda()
        gt = torch.tensor([[1.]]*8).cuda()
        y = resnet18(x)

        '''
        optim.zero_grad()
        loss = criter(y, gt)
        loss.backward()
        optim.step()
        '''
